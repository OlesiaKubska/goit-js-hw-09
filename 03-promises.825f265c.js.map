{"mappings":"iMAK6C,SAApCA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,mTAhBPO,EAAA,SAEaC,SAASC,cAAc,QAC/BC,iBAAiB,UAiBtB,SAAsBC,GACpBA,EAAMC,iBAO8C,IALpD,IAAMC,EAASC,SAASH,EAAMI,OAAOC,SAASH,OAAOI,OAC/CC,EAAQJ,SAASH,EAAMI,OAAOC,SAAShB,MAAMiB,OAC7CE,EAAOL,SAASH,EAAMI,OAAOC,SAASG,KAAKF,OAC3CG,EAAU,GAEPC,EAAI,EAAGA,EAAIR,EAAQQ,IAC1BD,EAAQE,KAAKxB,EAAcuB,EAAGH,EAAQG,EAAIF,IAGsBlB,QAA1DsB,IAAIC,UACTC,MAAK,SAACC,GACLA,EAAQC,SAAQ,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAC3B6B,SAASC,OAAOC,QAAQ,uBAAwCC,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M,OAGzEiC,OAAM,SAACP,GACNA,EAAQC,SAAQ,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAC3B6B,SAASC,OAAOI,QAAQ,sBAAqCF,OAAfjC,EAAS,QAAYiC,OAANhC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', handleSubmit); //додали обробник події submit до форми, який викликає функцію handleSubmit\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  \n  const amount = parseInt(event.target.elements.amount.value);\n  const delay = parseInt(event.target.elements.delay.value);\n  const step = parseInt(event.target.elements.step.value);\n  const promise = []; //створюємо масив promises, в який додаємо стільки промісів, скільки введ\n\n  for (let i = 0; i < amount; i++) {\n    promise.push(createPromise(i, delay + i * step));\n  }\n//Коли всі проміси будуть створені, використовуємо Promise.all для очікування їх виконання. \n  Promise.all(promises)\n    .then((results) => {\n      results.forEach(({ position, delay }) => {\n        notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      });\n    })\n    .catch((results) => {\n      results.forEach(({ position, delay }) => {\n        notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    });\n}"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","parcelRequire","document","querySelector","addEventListener","event","preventDefault","amount","parseInt","target","elements","value","delay1","step","promise","i","push","all","promises","then","results","forEach","param","notiflix","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.825f265c.js.map"}